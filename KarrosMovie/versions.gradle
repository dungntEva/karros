/*
 * Copyright (C) 2018 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * Shared file between builds so that they can all use the same dependencies and
 * maven repositories.
 **/
ext.deps = [:]
def versions = [:]
versions.activity = '1.1.0'
versions.android_gradle_plugin = '4.0.0'
versions.annotations = "1.0.0"
versions.apache_commons = "2.5"
versions.appcompat = "1.2.0-alpha02"
versions.arch_core = "2.1.0"
versions.atsl_core = "1.2.0"
versions.atsl_junit = "1.1.1"
versions.atsl_rules = "1.2.0"
versions.atsl_runner = "1.2.0"
versions.benchmark = "1.1.0-alpha01"
versions.cardview = "1.0.0"
versions.constraint_layout = "2.0.0-beta8"
versions.core_ktx = "1.1.0"
versions.coroutines = "1.3.7"
versions.dagger = "2.16"
versions.dexmaker = "2.2.0"
versions.espresso = "3.2.0"
versions.fragment = "1.2.1"
versions.glide = "4.8.0"
versions.hamcrest = "1.3"
versions.junit = "4.12"
versions.kotlin = "1.3.72"
versions.lifecycle = "2.2.0"
versions.material = "1.1.0"
versions.mockito = "2.25.0"
versions.mockito_all = "1.10.19"
versions.mockito_android = "2.25.0"
versions.mockwebserver = "3.8.1"
versions.navigation = "2.3.0-alpha01"
versions.okhttp_logging_interceptor = "3.9.0"
versions.paging = "3.0.0-alpha08"
versions.recyclerview = "1.0.0"
versions.retrofit = "2.9.0"
versions.robolectric = "4.2"
versions.room = "2.3.0-alpha01"
versions.rx_android = "2.0.1"
versions.rxjava2 = "2.1.3"
versions.timber = "4.7.1"
versions.transition = "1.3.0"
versions.truth = "1.0.1"
versions.work = "2.2.0"
versions.drawer = "1.1.1"
versions.firebase_database = "19.5.1"
versions.firebase_core = "17.3.0"
versions.firebase_ml_common = "22.1.0"
versions.firebase_ml_vision = "24.1.0"
versions.firebase_ml_vision_object_detection = "19.0.6"
versions.firebase_ml_vision_image_label = "20.0.1"
versions.firebase_ml_vision_face_model = "20.0.1"
versions.firebase_ml_model_interpreter = "22.0.0"
versions.androidx_legacy = "1.0.0"
versions.androidx_lifecycle = "2.1.0"
versions.androidx_viewpager2 = "1.1.0-alpha01"
versions.androidx_lifecycle_extensions = "2.1.0"
versions.gms_play_services_vision = "20.1.1"
versions.gms_play_services_vision_common = "19.1.1"
versions.gms_play_services_mlkit_text_recognition = "16.1.2"
versions.mlkit_face_detection = "16.0.0"
versions.retrofit2_retrofit = "2.9.0"
versions.retrofit2_converter_gson = "2.6.0"
versions.retrofit2_converter_moshi = "2.9.0"
versions.retrofit2_adapter_rxjava2 = "2.3.0"
versions.retrofit_kotlin_coroutines_adapter = "0.9.2"
versions.okhttp3_logging_interceptor = "4.7.2"
versions.rxjava2_rxandroid = "2.0.1"
versions.kotlinx_coroutines_android = "1.3.0"
versions.kotlinx_coroutines_core = "1.3.0"
versions.kodein_di = "6.2.1"
versions.androidx_security = "1.0.0-alpha02"
ext.versions = versions

def build_versions = [:]
build_versions.min_sdk = 14
build_versions.compile_sdk = 29
build_versions.target_sdk = 29
build_versions.build_tools = "29.0.3"
ext.build_versions = build_versions

def deps = [:]

def activity = [:]
activity.activity_ktx = "androidx.activity:activity-ktx:$versions.activity"
deps.activity = activity

deps.android_gradle_plugin = "com.android.tools.build:gradle:$versions.android_gradle_plugin"

deps.annotations = "androidx.annotation:annotation:$versions.annotations"

deps.app_compat = "androidx.appcompat:appcompat:$versions.appcompat"

def arch_core = [:]
arch_core.runtime = "androidx.arch.core:core-runtime:$versions.arch_core"
arch_core.testing = "androidx.arch.core:core-testing:$versions.arch_core"
deps.arch_core = arch_core

def atsl = [:]
atsl.core = "androidx.test:core:$versions.atsl_core"
atsl.ext_junit = "androidx.test.ext:junit:$versions.atsl_junit"
atsl.runner = "androidx.test:runner:$versions.atsl_runner"
atsl.rules = "androidx.test:rules:$versions.atsl_rules"
deps.atsl = atsl

deps.benchmark = "androidx.benchmark:benchmark-junit4:$versions.benchmark"
deps.benchmark_gradle = "androidx.benchmark:benchmark-gradle-plugin:$versions.benchmark"

deps.cardview = "androidx.cardview:cardview:$versions.cardview"

deps.constraint_layout = "androidx.constraintlayout:constraintlayout:$versions.constraint_layout"

deps.core_ktx = "androidx.core:core-ktx:$versions.core_ktx"

def coroutines = [:]
coroutines.android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.coroutines"
coroutines.test = "org.jetbrains.kotlinx:kotlinx-coroutines-test:$versions.coroutines"
deps.coroutines = coroutines

def dagger = [:]
dagger.runtime = "com.google.dagger:dagger:$versions.dagger"
dagger.android = "com.google.dagger:dagger-android:$versions.dagger"
dagger.android_support = "com.google.dagger:dagger-android-support:$versions.dagger"
dagger.compiler = "com.google.dagger:dagger-compiler:$versions.dagger"
dagger.android_support_compiler = "com.google.dagger:dagger-android-processor:$versions.dagger"
deps.dagger = dagger

deps.dexmaker = "com.linkedin.dexmaker:dexmaker-mockito:$versions.dexmaker"

def espresso = [:]
espresso.core = "androidx.test.espresso:espresso-core:$versions.espresso"
espresso.contrib = "androidx.test.espresso:espresso-contrib:$versions.espresso"
espresso.intents = "androidx.test.espresso:espresso-intents:$versions.espresso"
deps.espresso = espresso

def fragment = [:]
fragment.runtime = "androidx.fragment:fragment:${versions.fragment}"
fragment.runtime_ktx = "androidx.fragment:fragment-ktx:${versions.fragment}"
fragment.testing = "androidx.fragment:fragment-testing:${versions.fragment}"
deps.fragment = fragment

def glide = [:]
glide.runtime = "com.github.bumptech.glide:glide:$versions.glide"
glide.compiler = "com.github.bumptech.glide:compiler:$versions.glide"
deps.glide = glide

deps.hamcrest = "org.hamcrest:hamcrest-all:$versions.hamcrest"

deps.junit = "junit:junit:$versions.junit"

def kotlin = [:]
kotlin.stdlib = "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin"
kotlin.test = "org.jetbrains.kotlin:kotlin-test-junit:$versions.kotlin"
kotlin.plugin = "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
kotlin.allopen = "org.jetbrains.kotlin:kotlin-allopen:$versions.kotlin"
deps.kotlin = kotlin

deps.material = "com.google.android.material:material:$versions.material"

def mockito = [:]
mockito.core = "org.mockito:mockito-core:$versions.mockito"
mockito.all = "org.mockito:mockito-all:$versions.mockito_all"
mockito.android = "org.mockito:mockito-android:$versions.mockito_android"
deps.mockito = mockito

deps.mock_web_server = "com.squareup.okhttp3:mockwebserver:$versions.mockwebserver"

def navigation = [:]
navigation.runtime = "androidx.navigation:navigation-runtime:$versions.navigation"
navigation.runtime_ktx = "androidx.navigation:navigation-runtime-ktx:$versions.navigation"
navigation.fragment = "androidx.navigation:navigation-fragment:$versions.navigation"
navigation.fragment_ktx = "androidx.navigation:navigation-fragment-ktx:$versions.navigation"
navigation.testing = "androidx.navigation:navigation-testing:$versions.navigation"
navigation.ui = "androidx.navigation:navigation-ui:$versions.navigation"
navigation.ui_ktx = "androidx.navigation:navigation-ui-ktx:$versions.navigation"
navigation.safe_args_plugin = "androidx.navigation:navigation-safe-args-gradle-plugin:$versions.navigation"
navigation.drawer = "androidx.drawerlayout:drawerlayout:$versions.drawer"
deps.navigation = navigation

deps.okhttp_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:${versions.okhttp_logging_interceptor}"

deps.paging_runtime = "androidx.paging:paging-runtime:$versions.paging"

deps.recyclerview = "androidx.recyclerview:recyclerview:$versions.recyclerview"

def retrofit = [:]
retrofit.runtime = "com.squareup.retrofit2:retrofit:$versions.retrofit"
retrofit.gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit"
retrofit.mock = "com.squareup.retrofit2:retrofit-mock:$versions.retrofit"
deps.retrofit = retrofit

deps.robolectric = "org.robolectric:robolectric:$versions.robolectric"

def room = [:]
room.runtime = "androidx.room:room-runtime:$versions.room"
room.compiler = "androidx.room:room-compiler:$versions.room"
room.ktx = "androidx.room:room-ktx:$versions.room"
room.rxjava2 = "androidx.room:room-rxjava2:$versions.room"
room.testing = "androidx.room:room-testing:$versions.room"
deps.room = room

deps.rx_android = "io.reactivex.rxjava2:rxandroid:$versions.rx_android"

deps.rxjava2 = "io.reactivex.rxjava2:rxjava:$versions.rxjava2"

deps.timber = "com.jakewharton.timber:timber:$versions.timber"

deps.transition = "androidx.transition:transition:$versions.transition"

deps.truth = "com.google.truth:truth:$versions.truth"

def work = [:]
work.runtime = "androidx.work:work-runtime:$versions.work"
work.testing = "androidx.work:work-testing:$versions.work"
work.firebase = "androidx.work:work-firebase:$versions.work"
work.runtime_ktx = "androidx.work:work-runtime-ktx:$versions.work"
deps.work = work

def firebase = [:]
firebase.database = "com.google.firebase:firebase-database:$versions.firebase_database"
firebase.core = "com.google.firebase:firebase-core:$versions.firebase_core"
firebase.ml_vision = "com.google.firebase:firebase-ml-vision:$versions.firebase_ml_vision"
firebase.ml_common = "com.google.firebase:firebase-ml-common:$versions.firebase_ml_common"
firebase.ml_vision_object_detection = "com.google.firebase:firebase-ml-vision-object-detection-model:$versions.firebase_ml_vision_object_detection"
firebase.ml_vision_image_label = "com.google.firebase:firebase-ml-vision-image-label-model:$versions.firebase_ml_vision_image_label"
firebase.ml_vision_face_model = "com.google.firebase:firebase-ml-vision-face-model:$versions.firebase_ml_vision_face_model"
firebase.ml_model_interpreter = "com.google.firebase:firebase-ml-model-interpreter:$versions.firebase_ml_model_interpreter"
deps.firebase = firebase

def androidx = [:]
androidx.legacy = "androidx.legacy:legacy-support-v4:$versions.androidx_legacy"
androidx.lifecycle = "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.androidx_lifecycle"
androidx.viewpager2 = "androidx.viewpager2:viewpager2:$versions.androidx_viewpager2"
androidx.lifecycle_extensions = "androidx.lifecycle:lifecycle-extensions:$versions.androidx_lifecycle_extensions"
androidx.androidx_security = "androidx.security:security-crypto:$versions.androidx_security"
androidx.runtime = "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle"
androidx.java8 = "androidx.lifecycle:lifecycle-common-java8:$versions.lifecycle"
androidx.compiler = "androidx.lifecycle:lifecycle-compiler:$versions.lifecycle"
androidx.livedata_ktx = "androidx.lifecycle:lifecycle-livedata-ktx:$versions.lifecycle"
deps.androidx = androidx

def gms = [:]
gms.play_services_vision = "com.google.android.gms:play-services-vision:$versions.gms_play_services_vision"
gms.play_services_vision_common = "com.google.android.gms:play-services-vision-common:$versions.gms_play_services_vision_common"
gms.play_services_mlkit_text_recognition = "com.google.android.gms:play-services-mlkit-text-recognition:$versions.gms_play_services_mlkit_text_recognition"
gms.mlkit_face_detection = "com.google.mlkit:face-detection:$versions.mlkit_face_detection"
deps.gms = gms

def gson = [:]
gson.retrofit2_retrofit = "com.squareup.retrofit2:retrofit:$versions.retrofit2_retrofit"
gson.retrofit2_converter_gson = "com.squareup.retrofit2:converter-gson:$versions.retrofit2_converter_gson"
gson.retrofit2_converter_moshi = "com.squareup.retrofit2:converter-moshi:$versions.retrofit2_converter_moshi"
gson.retrofit2_adapter_rxjava2 = "com.squareup.retrofit2:adapter-rxjava2:$versions.retrofit2_adapter_rxjava2"
gson.retrofit_kotlin_coroutines_adapter = "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$versions.retrofit_kotlin_coroutines_adapter"
gson.okhttp3_logging_interceptor = "com.squareup.okhttp3:logging-interceptor:$versions.okhttp3_logging_interceptor"
gson.rxjava2_rxandroid = "io.reactivex.rxjava2:rxandroid:$versions.rxjava2_rxandroid"
deps.gson = gson

def kotlinx = [:]
kotlinx.kotlinx_coroutines_android = "org.jetbrains.kotlinx:kotlinx-coroutines-android:$versions.kotlinx_coroutines_android"
kotlinx.kotlinx_coroutines_core = "org.jetbrains.kotlinx:kotlinx-coroutines-core:$versions.kotlinx_coroutines_core"
deps.kotlinx = kotlinx

def kodeindi = [:]
kodeindi.generic_jvm = "org.kodein.di:kodein-di-generic-jvm:$versions.kodein_di"
kodeindi.framework_android_x = "org.kodein.di:kodein-di-framework-android-x:$versions.kodein_di"
deps.kodeindi = kodeindi

ext.deps = deps

def addRepos(RepositoryHandler handler) {
    handler.google()
    handler.jcenter()
    handler.maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}
ext.addRepos = this.&addRepos
